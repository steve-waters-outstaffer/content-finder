#!/usr/bin/env python3
import argparse, json, os, requests
from datetime import datetime
from pathlib import Path
from typing import Dict, Any

def main():
    ap = argparse.ArgumentParser(description="Send scraped content to Gemini for analysis")
    ap.add_argument("--content-file", required=True, help="Path to scraped markdown file")
    ap.add_argument("--prompt", help="Custom analysis prompt (optional)")
    ap.add_argument("--outdir", default="gemini_analysis", help="Output directory")
    ap.add_argument("--model", default="gemini-2.0-flash", help="Gemini model to use")
    args = ap.parse_args()

    # Check for API key
    api_key = os.environ.get('GEMINI_API_KEY')
    if not api_key:
        print("Error: GEMINI_API_KEY environment variable not set")
        return

    # Read content file
    content_path = Path(args.content_file)
    if not content_path.exists():
        print(f"Error: Content file not found: {content_path}")
        return
    
    content = content_path.read_text(encoding='utf-8')
    
    # Default prompt for content analysis
    default_prompt = f"""
    Analyze this scraped web content and provide:

    1. **Executive Summary** (2-3 sentences): What's the core message?
    
    2. **Key Insights** (3-5 bullet points): Main takeaways relevant to recruitment/EOR industry
    
    3. **Outstaffer Relevance** (paragraph): How does this content relate to Outstaffer's business model (recruitment-led global hiring + EOR platform serving US staffing firms and Australian B2B companies)?
    
    4. **Content Angle Ideas** (3 suggestions): How could this be adapted into blog posts or thought leadership for Outstaffer?
    
    5. **Action Items** (2-3 points): Specific ways Outstaffer could leverage these insights
    
    Keep analysis concise, practical, and focused on business applications. Avoid fluff.
    
    CONTENT TO ANALYZE:
    {content}
    """
    
    prompt_text = args.prompt if args.prompt else default_prompt
    
    # Prepare request
    url = f"https://generativelanguage.googleapis.com/v1beta/models/{args.model}:generateContent"
    
    headers = {
        'Content-Type': 'application/json',
        'X-goog-api-key': api_key
    }
    
    payload = {
        "contents": [
            {
                "parts": [
                    {
                        "text": prompt_text
                    }
                ]
            }
        ],
        "generationConfig": {
            "temperature": 0.7,
            "topK": 40,
            "topP": 0.95,
            "maxOutputTokens": 2048
        }
    }
    
    print(f"Sending content to Gemini {args.model}...")
    
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        
        result = response.json()
        
        # Extract generated text
        if 'candidates' in result and len(result['candidates']) > 0:
            candidate = result['candidates'][0]
            if 'content' in candidate and 'parts' in candidate['content']:
                generated_text = candidate['content']['parts'][0]['text']
            elif 'parts' in candidate:
                generated_text = candidate['parts'][0]['text']
            else:
                print("Error: Unexpected response structure")
                print("Response:", json.dumps(result, indent=2))
                return
            
            # Save results
            outdir = Path(args.outdir)
            outdir.mkdir(parents=True, exist_ok=True)
            
            ts = datetime.now().strftime("%Y%m%d_%H%M%S")
            source_name = content_path.stem
            
            # Save analysis
            analysis_path = outdir / f"{ts}_{source_name}_analysis.md"
            analysis_content = f"""# Content Analysis
            
**Source:** {content_path.name}
**Analyzed:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**Model:** {args.model}

---

{generated_text}

---

**Raw Response Data:**
```json
{json.dumps(result, indent=2)}
```
"""
            analysis_path.write_text(analysis_content, encoding='utf-8')
            print(f"✓ Analysis saved: {analysis_path}")
            
            # Also save just the clean analysis for easy reading
            clean_path = outdir / f"{ts}_{source_name}_clean.md"
            clean_path.write_text(generated_text, encoding='utf-8')
            print(f"✓ Clean analysis: {clean_path}")
            
            # Print to console for immediate review
            print("\n" + "="*60)
            print("GEMINI ANALYSIS:")
            print("="*60)
            print(generated_text)
            
        else:
            print("Error: No content generated by Gemini")
            print("Response:", json.dumps(result, indent=2))
            
    except requests.exceptions.RequestException as e:
        print(f"Error calling Gemini API: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print("Response:", e.response.text)

if __name__ == "__main__":
    main()
