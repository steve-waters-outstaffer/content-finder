"""Gemini API client for content analysis"""
import json
import os
import requests
from datetime import datetime
from typing import Dict, Any, Optional


class GeminiClient:
    """Wrapper for Gemini API operations"""
    
    def __init__(self, api_key: Optional[str] = None):
        """Initialize Gemini client"""
        self.api_key = api_key or os.environ.get('GEMINI_API_KEY')
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models"
    
    def analyze_content(self, content: str, prompt: str = None, model: str = "gemini-2.0-flash") -> Dict[str, Any]:
        """Analyze content with Gemini"""
        if not self.api_key:
            return {
                'success': False,
                'error': 'GEMINI_API_KEY not set',
                'analyzed_at': datetime.now().strftime("%Y%m%d_%H%M%S")
            }
        
        # Default analysis prompt tailored for Outstaffer
        if prompt is None:
            prompt = f"""
            Analyze this scraped web content and provide:

            1. **Executive Summary** (2-3 sentences): What's the core message?
            
            2. **Key Insights** (3-5 bullet points): Main takeaways relevant to recruitment/EOR industry
            
            3. **Outstaffer Relevance** (paragraph): How does this content relate to Outstaffer's business model (recruitment-led global hiring + EOR platform serving US staffing firms and Australian B2B companies)?
            
            4. **Content Angle Ideas** (3 suggestions): How could this be adapted into blog posts or thought leadership for Outstaffer?
            
            5. **Action Items** (2-3 points): Specific ways Outstaffer could leverage these insights
            
            Keep analysis concise, practical, and focused on business applications. Avoid fluff.
            
            CONTENT TO ANALYZE:
            {content}
            """
        
        url = f"{self.base_url}/{model}:generateContent"
        
        headers = {
            'Content-Type': 'application/json',
            'X-goog-api-key': self.api_key
        }
        
        payload = {
            "contents": [
                {
                    "parts": [
                        {
                            "text": prompt
                        }
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.7,
                "topK": 40,
                "topP": 0.95,
                "maxOutputTokens": 2048
            }
        }
        
        try:
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            
            result = response.json()
            
            # Extract generated text
            generated_text = None
            if 'candidates' in result and len(result['candidates']) > 0:
                candidate = result['candidates'][0]
                if 'content' in candidate and 'parts' in candidate['content']:
                    generated_text = candidate['content']['parts'][0]['text']
                elif 'parts' in candidate:
                    generated_text = candidate['parts'][0]['text']
            
            if generated_text:
                return {
                    'success': True,
                    'analysis': generated_text,
                    'raw_response': result,
                    'analyzed_at': datetime.now().strftime("%Y%m%d_%H%M%S"),
                    'model': model
                }
            else:
                return {
                    'success': False,
                    'error': 'No content generated by Gemini',
                    'raw_response': result,
                    'analyzed_at': datetime.now().strftime("%Y%m%d_%H%M%S")
                }
                
        except requests.exceptions.RequestException as e:
            return {
                'success': False,
                'error': f'Gemini API error: {str(e)}',
                'analyzed_at': datetime.now().strftime("%Y%m%d_%H%M%S")
            }
