"""Gemini API client for content analysis"""
import json
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional, List

from google import genai
from google.genai import types


class GeminiClient:
    """Wrapper for Gemini API operations"""

    def __init__(self, api_key: Optional[str] = None, model: Optional[str] = None):
        """Initialize Gemini client"""
        self.api_key = api_key or os.environ.get('GEMINI_API_KEY')
        self.default_model = model or os.environ.get('MODEL', 'gemini-2.5-flash')
        self._client: Optional[genai.Client] = None
        if self.api_key:
            self._client = genai.Client(api_key=self.api_key)

    def _get_client(self) -> Optional[genai.Client]:
        """Return a configured Gemini client if an API key is available."""
        if not self._client and self.api_key:
            self._client = genai.Client(api_key=self.api_key)
        return self._client

    def synthesize_content(
        self,
        query: str,
        contents: List[Dict[str, str]],
        model: Optional[str] = None,
    ) -> Dict[str, Any]:
        """Uses Gemini to synthesize an article from multiple sources."""
        client = self._get_client()
        if not client:
            return {'success': False, 'error': 'GEMINI_API_KEY not set'}

        # Prepare the source material for the prompt
        source_material = ""
        for i, doc in enumerate(contents):
            source_material += f"--- Source {i+1} ---\n"
            source_material += f"URL: {doc.get('url', 'N/A')}\n"
            source_material += f"Title: {doc.get('title', 'N/A')}\n"
            source_material += f"Content:\n{doc.get('markdown', '')[:2000]}\n\n" # Truncate

        # --- Load prompt from external file ---
        try:
            prompt_path = Path(__file__).parent.parent / 'intelligence' / 'config' / 'prompts' / 'synthesize_article_prompt.txt'
            with open(prompt_path, 'r', encoding='utf-8') as f:
                prompt_template = f.read()

            prompt = prompt_template.format(query=query, source_material=source_material)
        except Exception as e:
            return {'success': False, 'error': f'Failed to load prompt template: {str(e)}'}
        # -----------------------------------------

        chosen_model = model or self.default_model

        try:
            response = client.models.generate_content(
                model=chosen_model,
                contents=prompt,
                config=types.GenerateContentConfig(
                    temperature=0.7,
                    max_output_tokens=4096,
                    response_mime_type="application/json",
                ),
            )

            raw_text = (response.text or "").strip()
            cleaned_text = raw_text.replace('```json', '').replace('```', '').strip()
            if not cleaned_text.startswith('{'):
                json_start = cleaned_text.find('{')
                json_end = cleaned_text.rfind('}') + 1
                if json_start == -1 or json_end <= json_start:
                    raise ValueError("No JSON object found in the AI response.")
                cleaned_text = cleaned_text[json_start:json_end]

            parsed_result = json.loads(cleaned_text)

            if parsed_result.get("article"):
                return {
                    'success': True,
                    'article': parsed_result.get("article"),
                    'outstaffer_analysis': parsed_result.get("outstaffer_analysis"),
                    'linkedin_post': parsed_result.get("linkedin_post"),
                }
            return {'success': False, 'error': 'No article was generated by the AI.'}
        except (json.JSONDecodeError, ValueError) as e:
            return {
                'success': False,
                'error': f'Gemini response parsing error: {str(e)}',
            }
        except Exception as e:
            return {
                'success': False,
                'error': f'Gemini API error: {str(e)}',
            }


    def analyze_content(
        self,
        content: str,
        prompt: str = None,
        model: Optional[str] = None,
    ) -> Dict[str, Any]:
        """Analyze content with Gemini"""
        client = self._get_client()
        if not client:
            return {
                'success': False,
                'error': 'GEMINI_API_KEY not set',
                'analyzed_at': datetime.now().strftime("%Y%m%d_%H%M%S"),
            }

        # Default analysis prompt tailored for Outstaffer
        if prompt is None:
            prompt = f"""
            Analyze this scraped web content and provide:

            1. **Executive Summary** (2-3 sentences): What's the core message?
            
            2. **Key Insights** (3-5 bullet points): Main takeaways relevant to recruitment/EOR industry
            
            3. **Outstaffer Relevance** (paragraph): How does this content relate to Outstaffer's business model (recruitment-led global hiring + EOR platform serving US staffing firms and Australian B2B companies)?
            
            4. **Content Angle Ideas** (3 suggestions): How could this be adapted into blog posts or thought leadership for Outstaffer?
            
            5. **Action Items** (2-3 points): Specific ways Outstaffer could leverage these insights
            
            Keep analysis concise, practical, and focused on business applications. Avoid fluff.
            
            CONTENT TO ANALYZE:
            {content}
            """
        
        chosen_model = model or self.default_model

        try:
            response = client.models.generate_content(
                model=chosen_model,
                contents=prompt,
                config=types.GenerateContentConfig(
                    temperature=0.7,
                    top_k=40,
                    top_p=0.95,
                    max_output_tokens=2048,
                ),
            )

            generated_text = (response.text or "").strip()
            if generated_text:
                return {
                    'success': True,
                    'analysis': generated_text,
                    'raw_response': response.model_dump(),
                    'analyzed_at': datetime.now().strftime("%Y%m%d_%H%M%S"),
                    'model': chosen_model,
                }
            return {
                'success': False,
                'error': 'No content generated by Gemini',
                'raw_response': response.model_dump(),
                'analyzed_at': datetime.now().strftime("%Y%m%d_%H%M%S"),
            }

        except Exception as e:
            return {
                'success': False,
                'error': f'Gemini API error: {str(e)}',
                'analyzed_at': datetime.now().strftime("%Y%m%d_%H%M%S"),
            }
